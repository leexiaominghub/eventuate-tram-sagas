buildscript {
    repositories {
        mavenLocal()
        maven { url 'http://maven.aliyun.com/nexus/content/groups/public/' }
        maven{ url 'http://maven.aliyun.com/nexus/content/repositories/jcenter'}
        mavenCentral()
        maven {
          url "https://plugins.gradle.org/m2/"
        }
        jcenter()
        eventuateMavenRepoUrl.split(',').each { repoUrl -> maven { url repoUrl } }
    }
    dependencies {
        classpath "com.avast.gradle:gradle-docker-compose-plugin:0.9.2"
        classpath "io.eventuate.plugins.gradle:eventuate-plugins-gradle-publish:$eventuatePluginsGradleVersion"
    }
}


apply plugin: 'docker-compose'

allprojects {
    group = "io.eventuate.tram.sagas"
    version = '0.18.0-lxm-RELEASE' // 指定版本
    apply plugin: 'maven' // 引入maven插件
}

apply plugin: "io.eventuate.plugins.gradle.publish.EventuatePublish"
apply plugin: "io.eventuate.plugins.gradle.publish.EventuatePublishDockerImages"

allprojects {

    sourceCompatibility = 1.8
    targetCompatibility = 1.8

    repositories {
        mavenLocal()
        maven { url 'http://maven.aliyun.com/nexus/content/groups/public/' }
        maven{ url 'http://maven.aliyun.com/nexus/content/repositories/jcenter'}
        mavenCentral()
        jcenter()
        eventuateMavenRepoUrl.split(',').each { repoUrl -> maven { url repoUrl } }
    }
    apply plugin: 'maven-publish'
    // 指定上传的路径
    def localMavenRepo = 'file://' + new File('D:\\apache-maven-3.5.2\\local\\repo').absolutePath
// 上传Task，Gradle会生成并上传pom.xml文件。
    uploadArchives {
        repositories {
            mavenDeployer {
                repository(url: localMavenRepo)
                //构造项目的Pom文件
                pom.project {
                    name = 'eventuate-messaging-kafka'
                    packaging = 'jar'
                    description = 'lixiaoming for debug'
                }
            }
        }
    }



    if (!project.name.endsWith("-bom"))
      dependencies {
          testCompile "junit:junit:4.12"
          testCompile "org.mockito:mockito-core:2.23.0"
      }

}

gradle.projectsEvaluated {
    task aggregateJavaDocs(type: Javadoc) {
        description = 'Aggregated Javadoc API documentation of all subprojects.'
        group = JavaBasePlugin.DOCUMENTATION_GROUP

        destinationDir file("$buildDir/docs/javadoc")
    }

    task("aggregateJavaDocsJar", type: org.gradle.api.tasks.bundling.Jar, dependsOn: project.aggregateJavaDocs) {
        classifier = 'javadoc'
        from 'build/docs/javadoc'
    }

    artifacts {
        archives project.aggregateJavaDocsJar
    }

}


dockerCompose {
    environment.put "EVENTUATE_COMMON_VERSION", eventuateCommonImageVersion
    environment.put "EVENTUATE_CDC_VERSION", eventuateCdcImageVersion

    environment.put "DOCKER_IMAGE_TAG", dockerImageTag

    activemqInfrastructure {
        projectName = null
        useComposeFiles = ["docker-compose-mysql.yml"]
        startedServices = ["mysql", "activemq"]
    }

    mysqlAll {
        projectName = null
        useComposeFiles = ["docker-compose-mysql.yml"]
    }


    postgresAll {
        projectName = null
        useComposeFiles = ["docker-compose-postgres.yml"]
    }

    mssqlAll {
        projectName = null
        useComposeFiles = ["docker-compose-mssql.yml"]
    }

    publish {
        projectName = null
        useComposeFiles = ["docker-compose-mysql.yml", "docker-compose-postgres.yml", "docker-compose-mssql.yml"]
    }
}
